// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RMS_Dashboard.Data;

#nullable disable

namespace RMS_Dashboard.Data.Migrations
{
    [DbContext(typeof(RmsDbContext))]
    partial class RmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.BenchExitDetail", b =>
                {
                    b.Property<int>("BenchExitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BenchExitID"));

                    b.Property<string>("BenchCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmpID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExitReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BenchExitID");

                    b.HasIndex("EmpID");

                    b.ToTable("BenchExitDetail");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BenchStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BenchStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CareerStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateOfJoining")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExitStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedRollOffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FitmentScore")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OverAllExperience")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerformanceRating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Practice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimarySkills")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RelevantExpPrimary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RelevantExpSecondary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReportingManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondarySkills")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalExpYears")
                        .HasColumnType("numeric");

                    b.Property<string>("TrainingCompletionStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingPlanAssigned")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.EmployeeEngagementPlan", b =>
                {
                    b.Property<int>("EngagementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EngagementID"));

                    b.Property<string>("EmpID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EngagementPlan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RollOffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EngagementID");

                    b.HasIndex("EmpID");

                    b.HasIndex("ProjectID");

                    b.ToTable("EmployeeEngagementPlan");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.EmployeeSkill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillID"));

                    b.Property<string>("EmpID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PastInitiative")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechStack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SkillID");

                    b.HasIndex("EmpID");

                    b.ToTable("EmployeeSkill");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectID"));

                    b.Property<string>("Architect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EngineeringManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProjectID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.ResourceAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeID")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ResourceAllocations");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.BenchExitDetail", b =>
                {
                    b.HasOne("RMS_Dashboard.Core.Entities.Employee", "Employee")
                        .WithMany("BenchExitDetails")
                        .HasForeignKey("EmpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.EmployeeEngagementPlan", b =>
                {
                    b.HasOne("RMS_Dashboard.Core.Entities.Employee", "Employee")
                        .WithMany("EngagementPlans")
                        .HasForeignKey("EmpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RMS_Dashboard.Core.Entities.Project", "Project")
                        .WithMany("EngagementPlans")
                        .HasForeignKey("ProjectID");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.EmployeeSkill", b =>
                {
                    b.HasOne("RMS_Dashboard.Core.Entities.Employee", "Employee")
                        .WithMany("Skills")
                        .HasForeignKey("EmpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.ResourceAllocation", b =>
                {
                    b.HasOne("RMS_Dashboard.Core.Entities.Employee", null)
                        .WithMany("Allocations")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("RMS_Dashboard.Core.Entities.Project", null)
                        .WithMany("Allocations")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.Employee", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("BenchExitDetails");

                    b.Navigation("EngagementPlans");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("RMS_Dashboard.Core.Entities.Project", b =>
                {
                    b.Navigation("Allocations");

                    b.Navigation("EngagementPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
